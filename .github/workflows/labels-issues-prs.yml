name: Labels for issues and pull requests

# This workflow applies default lifecycle and priority labels to issues,
# enforces exactly one status:* label, and runs path‑based labelling for PRs
# using labeler.yml. It also adds a changelog reminder on PRs.

on:
  issues:
    types: [opened, reopened, transferred]
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      # Apply path‑based labels for PRs via .github/labeler.yml
      - name: Run PR labeler
        if: github.event_name == 'pull_request'
        uses: actions/labeler@v4
        with:
          configuration-path: .github/labeler.yml
          sync-labels: true

      # Default labels and enforcement for issues
      - name: Set default issue labels
        if: github.event_name == 'issues'
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            const toAdd = [];
            // Ensure exactly one status:* label
            const statusLabels = labels.filter(l => l.startsWith('status:'));
            if (statusLabels.length === 0) {
              toAdd.push('status:needs-triage');
            } else if (statusLabels.length > 1) {
              core.setFailed(`Multiple status:* labels detected: ${statusLabels.join(', ')}`);
            }
            // Ensure at least one priority label
            if (!labels.some(l => l.startsWith('priority:'))) {
              toAdd.push('priority:normal');
            }
            // Apply labels if needed
            if (toAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: toAdd,
              });
            }

      # Default labels for PRs and changelog reminder
      - name: Set default PR labels and changelog marker
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            const labels = pr.labels.map(l => l.name);
            const toAdd = [];
            // Ensure exactly one status:* label on PRs
            const statusLabels = labels.filter(l => l.startsWith('status:'));
            if (statusLabels.length === 0) {
              toAdd.push('status:needs-review');
            } else if (statusLabels.length > 1) {
              core.setFailed(`Multiple status:* labels detected: ${statusLabels.join(', ')}`);
            }
            // Add changelog marker if no changelog status is present
            const hasChangelog = labels.some(l => l === 'meta:needs-changelog' || l === 'meta:no-changelog');
            if (!hasChangelog) {
              toAdd.push('meta:needs-changelog');
            }
            if (toAdd.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: toAdd,
              });
            }